{
	"info": {
		"_postman_id": "d2308c21-37ef-4613-bff4-d7eb3bc28f58",
		"name": "Interrapt - Sara Gjosheva",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33595671"
	},
	"item": [
		{
			"name": "Positive Scenarios",
			"item": [
				{
					"name": "Return All Webinars",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify that response time is less than 2500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2500);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that response time not above than 3000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.not.be.above(3500);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that is successful GET request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that status code is not one of 400, 403, 404, 405, 415 (Client Error)\", function () {\r",
									"    pm.expect(pm.response.code).to.not.be.oneOf([400, 403, 404, 405, 415]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that status code is not 500 or 503 (Server Error)\", function () {\r",
									"    pm.response.to.not.have.status([500, 503]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Connection is present\", function () {\r",
									"    pm.response.to.have.header(\"Connection\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Server is present\", function () {\r",
									"    pm.response.to.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Methods is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Access-Control-Allow-Methods\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Headers is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Access-Control-Allow-Headers\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Date is present\", function () {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Content-Length is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Content-Length\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Origin is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Expose-Headers is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Access-Control-Expose-Headers\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that User-Agent is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"User-Agent\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Host is present\", function () {\r",
									"    pm.response.to.have.header(\"Host\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Accept-Encoding is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Accept-Encoding\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Postman-Token is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Postman-Token\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Accept is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Accept\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that API key is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"api_key\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that response body includes data for the webinar\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"data\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that response body includes id for the webinar\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that response body includes title for the webinar\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"title\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that response body includes description for the webinar\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"description\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that response body includes start_date for the webinar\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"start_date\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that response body includes end_date for the webinar\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"end_date\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that response body includes image for the webinar\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"image\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that response body includes guid for the webinar\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"guid\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that response body includes link for the webinar\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"link\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that response body includes tags for the webinar\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"tags\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that response body includes mentors for the webinar\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"mentors\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that response body includes all data for the webinar\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"title\");\r",
									"    pm.expect(pm.response.text()).to.include(\"description\");\r",
									"    pm.expect(pm.response.text()).to.include(\"start_date\");\r",
									"    pm.expect(pm.response.text()).to.include(\"end_date\");\r",
									"    pm.expect(pm.response.text()).to.include(\"image\");\r",
									"    pm.expect(pm.response.text()).to.include(\"guid\");\r",
									"    pm.expect(pm.response.text()).to.include(\"link\");\r",
									"    pm.expect(pm.response.text()).to.include(\"tags\");\r",
									"    pm.expect(pm.response.text()).to.include(\"mentors\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/webinars",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"webinars"
							]
						}
					},
					"response": []
				},
				{
					"name": "Return All Upcoming Webinars",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify that response time is less than 600ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(600);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that response time not above than 800ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.not.be.above(800);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that is successful GET request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that status code is not one of 400, 403, 404, 405, 415 (Client Error)\", function () {\r",
									"    pm.expect(pm.response.code).to.not.be.oneOf([400, 403, 404, 405, 415]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that status code is not 500 or 503 (Server Error)\", function () {\r",
									"    pm.response.to.not.have.status([500, 503]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Connection is present\", function () {\r",
									"    pm.response.to.have.header(\"Connection\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Server is present\", function () {\r",
									"    pm.response.to.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Methods is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Access-Control-Allow-Methods\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Headers is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Access-Control-Allow-Headers\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Date is present\", function () {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Content-Length is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Content-Length\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Origin is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Expose-Headers is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Access-Control-Expose-Headers\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that User-Agent is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"User-Agent\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Host is present\", function () {\r",
									"    pm.response.to.have.header(\"Host\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Accept-Encoding is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Accept-Encoding\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Postman-Token is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Postman-Token\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Accept is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Accept\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that API key is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"api_key\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that response body includes data for the webinar\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"data\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that response body includes id for the webinar\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that response body includes title for the webinar\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"title\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that response body includes description for the webinar\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"description\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that response body includes start_date for the webinar\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"start_date\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that response body includes end_date for the webinar\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"end_date\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that response body includes image for the webinar\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"image\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that response body includes guid for the webinar\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"guid\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that response body includes link for the webinar\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"link\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that response body includes tags for the webinar\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"tags\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that response body includes mentors for the webinar\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"mentors\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that response body includes all data for the webinar\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"title\");\r",
									"    pm.expect(pm.response.text()).to.include(\"description\");\r",
									"    pm.expect(pm.response.text()).to.include(\"start_date\");\r",
									"    pm.expect(pm.response.text()).to.include(\"end_date\");\r",
									"    pm.expect(pm.response.text()).to.include(\"image\");\r",
									"    pm.expect(pm.response.text()).to.include(\"guid\");\r",
									"    pm.expect(pm.response.text()).to.include(\"link\");\r",
									"    pm.expect(pm.response.text()).to.include(\"tags\");\r",
									"    pm.expect(pm.response.text()).to.include(\"mentors\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/webinars/upcoming",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"webinars",
								"upcoming"
							]
						}
					},
					"response": []
				},
				{
					"name": "Return All Past Webinars",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify that response time is less than 2500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2500);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that response time not above than 3000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.not.be.above(3500);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that is successful GET request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that status code is not one of 400, 403, 404, 405, 415 (Client Error)\", function () {\r",
									"    pm.expect(pm.response.code).to.not.be.oneOf([400, 403, 404, 405, 415]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that status code is not 500 or 503 (Server Error)\", function () {\r",
									"    pm.response.to.not.have.status([500, 503]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Connection is present\", function () {\r",
									"    pm.response.to.have.header(\"Connection\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Server is present\", function () {\r",
									"    pm.response.to.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Methods is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Access-Control-Allow-Methods\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Headers is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Access-Control-Allow-Headers\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Date is present\", function () {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Content-Length is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Content-Length\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Origin is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Expose-Headers is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Access-Control-Expose-Headers\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that User-Agent is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"User-Agent\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Host is present\", function () {\r",
									"    pm.response.to.have.header(\"Host\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Accept-Encoding is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Accept-Encoding\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Postman-Token is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Postman-Token\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Accept is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Accept\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that API key is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"api_key\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that response body includes data for the webinar\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"data\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that response body includes id for the webinar\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that response body includes title for the webinar\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"title\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that response body includes description for the webinar\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"description\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that response body includes start_date for the webinar\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"start_date\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that response body includes end_date for the webinar\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"end_date\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that response body includes image for the webinar\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"image\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that response body includes guid for the webinar\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"guid\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that response body includes link for the webinar\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"link\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that response body includes tags for the webinar\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"tags\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that response body includes mentors for the webinar\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"mentors\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that response body includes all data for the webinar\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"title\");\r",
									"    pm.expect(pm.response.text()).to.include(\"description\");\r",
									"    pm.expect(pm.response.text()).to.include(\"start_date\");\r",
									"    pm.expect(pm.response.text()).to.include(\"end_date\");\r",
									"    pm.expect(pm.response.text()).to.include(\"image\");\r",
									"    pm.expect(pm.response.text()).to.include(\"guid\");\r",
									"    pm.expect(pm.response.text()).to.include(\"link\");\r",
									"    pm.expect(pm.response.text()).to.include(\"tags\");\r",
									"    pm.expect(pm.response.text()).to.include(\"mentors\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/webinars/past",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"webinars",
								"past"
							]
						}
					},
					"response": []
				},
				{
					"name": "Return Statistics of Webinar",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify that response time is less than 350ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(350);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that response time not above than 600ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.not.be.above(600);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that is successful GET request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that status code is not one of 400, 403, 404, 405, 415 (Client Error)\", function () {\r",
									"    pm.expect(pm.response.code).to.not.be.oneOf([400, 403, 404, 405, 415]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that status code is not 500 or 503 (Server Error)\", function () {\r",
									"    pm.response.to.not.have.status([500, 503]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Connection is present\", function () {\r",
									"    pm.response.to.have.header(\"Connection\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Server is present\", function () {\r",
									"    pm.response.to.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Methods is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Access-Control-Allow-Methods\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Headers is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Access-Control-Allow-Headers\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Date is present\", function () {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Content-Length is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Content-Length\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Origin is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Expose-Headers is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Access-Control-Expose-Headers\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that User-Agent is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"User-Agent\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Host is present\", function () {\r",
									"    pm.response.to.have.header(\"Host\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Accept-Encoding is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Accept-Encoding\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Postman-Token is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Postman-Token\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Accept is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Accept\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that API key is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"api_key\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that response body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"questions\");\r",
									"    pm.expect(pm.response.text()).to.include(\"comments\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that response body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"attendees\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that response body does not matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.not.include(\"id\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "pm.test(\"Verify that response time is less than 200ms\", function () {\r\n    pm.expect(pm.response.responseTime).to.be.below(200);\r\n});\r\n\r\npm.test(\"Verify that response time not above than 400ms\", function () {\r\n    pm.expect(pm.response.responseTime).to.not.be.above(400);\r\n});\r\n\r\npm.test(\"Verify that is successful GET request\", function () {\r\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);\r\n});\r\n\r\npm.test(\"Verify that status code is not one of 400, 403, 404, 405, 415 (Client Error)\", function () {\r\n    pm.expect(pm.response.code).to.not.be.oneOf([400, 403, 404, 405, 415]);\r\n});\r\n\r\npm.test(\"Verify that status code is not 500 or 503 (Server Error)\", function () {\r\n    pm.response.to.not.have.status([500, 503]);\r\n});\r\n\r\npm.test(\"Verify that Content-Type is present\", function () {\r\n    pm.response.to.have.header(\"Content-Type\");\r\n});\r\n\r\npm.test(\"Verify that Connection is present\", function () {\r\n    pm.response.to.have.header(\"Connection\");\r\n});\r\n\r\npm.test(\"Verify that Server is present\", function () {\r\n    pm.response.to.have.header(\"Server\");\r\n});\r\n\r\npm.test(\"Verify that Access-Control-Allow-Methods is present\", function () {\r\n    pm.response.to.have.header(\"Access-Control-Allow-Methods\");\r\n});\r\n\r\npm.test(\"Verify that Access-Control-Allow-Headers is present\", function () {\r\n    pm.response.to.have.header(\"Access-Control-Allow-Headers\");\r\n});\r\n\r\npm.test(\"Verify that Date is present\", function () {\r\n    pm.response.to.have.header(\"Date\");\r\n});\r\n\r\npm.test(\"Verify that Content-Length is present\", function () {\r\n    pm.response.to.have.header(\"Content-Length\");\r\n});\r\n\r\npm.test(\"Verify that Access-Control-Allow-Origin is present\", function () {\r\n    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r\n});\r\n\r\npm.test(\"Verify that Access-Control-Expose-Headers is present\", function () {\r\n    pm.response.to.have.header(\"Access-Control-Expose-Headers\");\r\n});\r\n\r\npm.test(\"Verify that User-Agent is not present\", function () {\r\n    pm.response.to.not.have.header(\"User-Agent\");\r\n});\r\n\r\npm.test(\"Verify that Host is not present\", function () {\r\n    pm.response.to.not.have.header(\"Host\");\r\n});\r\n\r\npm.test(\"Verify that Accept-Encoding is not present\", function () {\r\n    pm.response.to.not.have.header(\"Accept-Encoding\");\r\n});\r\n\r\npm.test(\"Verify that Postman-Token is not present\", function () {\r\n    pm.response.to.not.have.header(\"Postman-Token\");\r\n});\r\n\r\npm.test(\"Verify that Accept is not present\", function () {\r\n    pm.response.to.not.have.header(\"Accept\");\r\n});\r\n\r\npm.test(\"Verify that API key is not present\", function () {\r\n    pm.response.to.not.have.header(\"api_key\");\r\n});",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/webinars/1542/statistics",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"webinars",
								"1542",
								"statistics"
							]
						}
					},
					"response": []
				},
				{
					"name": "Return Questions of Webinar",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify that response time is less than 400ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that response time not above than 600ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.not.be.above(600);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that is successful GET request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that status code is not one of 400, 403, 404, 405, 415 (Client Error)\", function () {\r",
									"    pm.expect(pm.response.code).to.not.be.oneOf([400, 403, 404, 405, 415]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that status code is not 500 or 503 (Server Error)\", function () {\r",
									"    pm.response.to.not.have.status([500, 503]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Connection is present\", function () {\r",
									"    pm.response.to.have.header(\"Connection\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Server is present\", function () {\r",
									"    pm.response.to.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Methods is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Access-Control-Allow-Methods\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Headers is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Access-Control-Allow-Headers\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Date is present\", function () {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Content-Length is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Content-Length\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Origin is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Expose-Headers is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Access-Control-Expose-Headers\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that User-Agent is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"User-Agent\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Host is present\", function () {\r",
									"    pm.response.to.have.header(\"Host\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Accept-Encoding is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Accept-Encoding\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Postman-Token is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Postman-Token\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Accept is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Accept\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that API key is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"api_key\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that response body includes data for the question\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"data\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that response body includes id for the question\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that response body includes text for the question\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"text\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that response body includes is_approved for the question\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"is_approved\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that response body includes is_answered for the question\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"is_answered\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that response body includes is_anonymous for the question\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"is_anonymous\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that response body includes created_at for the question\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"created_at\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that response body includes attendee for the question\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"attendee\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that response body includes all data for the question\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"text\");\r",
									"    pm.expect(pm.response.text()).to.include(\"is_approved\");\r",
									"    pm.expect(pm.response.text()).to.include(\"is_answered\");\r",
									"    pm.expect(pm.response.text()).to.include(\"is_anonymous\");\r",
									"    pm.expect(pm.response.text()).to.include(\"created_at\");\r",
									"    pm.expect(pm.response.text()).to.include(\"attendee\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/webinars/1542/questions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"webinars",
								"1542",
								"questions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Return Comments of Question",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify that response time is less than 350ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(350);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that response time not above than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.not.be.above(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that is successful GET request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that status code is not one of 400, 403, 404, 405, 415 (Client Error)\", function () {\r",
									"    pm.expect(pm.response.code).to.not.be.oneOf([400, 403, 404, 405, 415]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that status code is not 500 or 503 (Server Error)\", function () {\r",
									"    pm.response.to.not.have.status([500, 503]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Connection is present\", function () {\r",
									"    pm.response.to.have.header(\"Connection\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Server is present\", function () {\r",
									"    pm.response.to.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Methods is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Access-Control-Allow-Methods\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Headers is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Access-Control-Allow-Headers\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Date is present\", function () {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Content-Length is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Content-Length\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Origin is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Expose-Headers is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Access-Control-Expose-Headers\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that User-Agent is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"User-Agent\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Host is present\", function () {\r",
									"    pm.response.to.have.header(\"Host\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Accept-Encoding is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Accept-Encoding\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Postman-Token is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Postman-Token\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Accept is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Accept\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that API key is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"api_key\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that response body includes data for the question\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"data\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that response body includes id for the question\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that response body includes comment for the question\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"comment\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that response body includes is_approved for the question\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"is_approved\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that response body includes is_anonymous for the question\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"is_anonymous\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that response body includes attendee for the question\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"attendee\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that response body includes all data for the question\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"comment\");\r",
									"    pm.expect(pm.response.text()).to.include(\"is_approved\");\r",
									"    pm.expect(pm.response.text()).to.include(\"is_anonymous\");\r",
									"    pm.expect(pm.response.text()).to.include(\"attendee\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/questions/299/comments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"questions",
								"299",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Verify that response time is less than 500ms', function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"})\r",
									"\r",
									"pm.test('Verify that response time not above than 700ms', function () {\r",
									"    pm.expect(pm.response.responseTime).to.not.be.above(700);\r",
									"})\r",
									"\r",
									"pm.test('Verify that is successful POST request', function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);\r",
									"})\r",
									"\r",
									"pm.test('Verify that status code is not one of 400, 403, 404, 405, 415 (Client Error)', function () {\r",
									"    pm.expect(pm.response.code).to.not.be.oneOf([400, 403, 404, 405, 415]);\r",
									"})\r",
									"\r",
									"pm.test('Verify that status code is not 500 or 503 (Server Error)', function () {\r",
									"    pm.response.to.not.have.status([500, 503]);\r",
									"})\r",
									"\r",
									"pm.test('Verify that Content-Type is present', function () {\r",
									"    pm.response.to.have.header('Content-Type');\r",
									"})\r",
									"\r",
									"pm.test('Verify that Connection is present', function () {\r",
									"    pm.response.to.have.header('Connection');\r",
									"})\r",
									"\r",
									"pm.test('Verify that Server is present', function () {\r",
									"    pm.response.to.have.header('Server');\r",
									"})\r",
									"\r",
									"pm.test('Verify that Access-Control-Allow-Methods is not present', function () {\r",
									"    pm.response.to.not.have.header('Access-Control-Allow-Methods');\r",
									"})\r",
									"\r",
									"pm.test('Verify that Access-Control-Allow-Headers is not present', function () {\r",
									"    pm.response.to.not.have.header('Access-Control-Allow-Headers');\r",
									"})\r",
									"\r",
									"pm.test('Verify that Date is present', function () {\r",
									"    pm.response.to.have.header('Date');\r",
									"})\r",
									"\r",
									"pm.test('Verify that Content-Length is not present', function () {\r",
									"    pm.response.to.not.have.header('Content-Length');\r",
									"})\r",
									"\r",
									"pm.test('Verify that Access-Control-Allow-Origin is present', function () {\r",
									"    pm.response.to.have.header('Access-Control-Allow-Origin');\r",
									"})\r",
									"\r",
									"pm.test('Verify that Access-Control-Expose-Headers is not present', function () {\r",
									"    pm.response.to.not.have.header('Access-Control-Expose-Headers');\r",
									"})\r",
									"\r",
									"pm.test('Verify that User-Agent is not present', function () {\r",
									"    pm.response.to.not.have.header('User-Agent');\r",
									"})\r",
									"\r",
									"pm.test('Verify that Host is present', function () {\r",
									"    pm.response.to.have.header('Host');\r",
									"})\r",
									"\r",
									"pm.test('Verify that Accept-Encoding is not present', function () {\r",
									"    pm.response.to.not.have.header('Accept-Encoding');\r",
									"})\r",
									"\r",
									"pm.test('Verify that Postman-Token is not present', function () {\r",
									"    pm.response.to.not.have.header('Postman-Token');\r",
									"})\r",
									"\r",
									"pm.test('Verify that Accept is not present', function () {\r",
									"    pm.response.to.not.have.header('Accept');\r",
									"})\r",
									"\r",
									"pm.test('Verify that API key is not present', function () {\r",
									"    pm.response.to.not.have.header('api_key');\r",
									"})\r",
									"\r",
									"pm.test(\"Verify that response body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"token\");\r",
									"    pm.expect(pm.response.text()).to.include(\"type\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"sara_gjosheva@yahoo.com\",\r\n  \"password\": \"Brainster1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieving a code for attending a Webinar",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify that response time is less than 350ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(350);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that response time not above than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.not.be.above(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that is successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that status code is not one of 400, 403, 404, 405, 415 (Client Error)\", function () {\r",
									"    pm.expect(pm.response.code).to.not.be.oneOf([400, 403, 404, 405, 415]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that status code is not 500 or 503 (Server Error)\", function () {\r",
									"    pm.response.to.not.have.status([500, 503]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Connection is present\", function () {\r",
									"    pm.response.to.have.header(\"Connection\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Server is present\", function () {\r",
									"    pm.response.to.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Methods is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Access-Control-Allow-Methods\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Headers is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Access-Control-Allow-Headers\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Date is present\", function () {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Content-Length is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Content-Length\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Origin is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Expose-Headers is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Access-Control-Expose-Headers\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that User-Agent is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"User-Agent\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Host is present\", function () {\r",
									"    pm.response.to.have.header(\"Host\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Accept-Encoding is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Accept-Encoding\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Postman-Token is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Postman-Token\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Accept is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Accept\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that API key is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"api_key\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that response body contains string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"message\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "Bearer 335|e91gq9cuM0miMDhEUF7B2TdHgCcTv5VAZhovSRJb",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Sara\",\r\n  \"surname\": \"Gjosheva\",\r\n  \"email\": \"sara_gjosheva@yahoo.com\",\r\n  \"webinar_id\": 1542\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/attendees",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"attendees"
							]
						}
					},
					"response": []
				},
				{
					"name": "Updates the attendee's information",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify that response time is less than 360ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(360);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that response time not above than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.not.be.above(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that is successful PUT request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that status code is not one of 400, 403, 404, 405, 415 (Client Error)\", function () {\r",
									"    pm.expect(pm.response.code).to.not.be.oneOf([400, 403, 404, 405, 415]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that status code is not 500 or 503 (Server Error)\", function () {\r",
									"    pm.response.to.not.have.status([500, 503]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Connection is present\", function () {\r",
									"    pm.response.to.have.header(\"Connection\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Server is present\", function () {\r",
									"    pm.response.to.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Methods is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Access-Control-Allow-Methods\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Headers is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Access-Control-Allow-Headers\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Date is present\", function () {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Content-Length is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Content-Length\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Origin is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Expose-Headers is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Access-Control-Expose-Headers\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that User-Agent is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"User-Agent\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Host is present\", function () {\r",
									"    pm.response.to.have.header(\"Host\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Accept-Encoding is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Accept-Encoding\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Postman-Token is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Postman-Token\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Accept is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Accept\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that API key is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"api_key\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that response body contains string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"message\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "Bearer 335|e91gq9cuM0miMDhEUF7B2TdHgCcTv5VAZhovSRJb",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Sara\",\r\n  \"surname\": \"Gjosheva\",\r\n  \"email\": \"sara@yahoo.com\",\r\n  \"webinar_id\": 1542\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/attendees/3156",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"attendees",
								"3156"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete the attendee",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify that response time is less than 350ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(350);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that response time not above than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.not.be.above(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that is successful DELETE request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that status code is not one of 400, 403, 404, 405, 415 (Client Error)\", function () {\r",
									"    pm.expect(pm.response.code).to.not.be.oneOf([400, 403, 404, 405, 415]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that status code is not 500 or 503 (Server Error)\", function () {\r",
									"    pm.response.to.not.have.status([500, 503]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Connection is present\", function () {\r",
									"    pm.response.to.have.header(\"Connection\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Server is present\", function () {\r",
									"    pm.response.to.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Methods is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Access-Control-Allow-Methods\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Headers is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Access-Control-Allow-Headers\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Date is present\", function () {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Content-Length is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Content-Length\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Origin is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Expose-Headers is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Access-Control-Expose-Headers\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that User-Agent is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"User-Agent\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Host is present\", function () {\r",
									"    pm.response.to.have.header(\"Host\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Accept-Encoding is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Accept-Encoding\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Postman-Token is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Postman-Token\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Accept is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Accept\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that API key is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"api_key\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that response body contains string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"message\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "Bearer 335|e91gq9cuM0miMDhEUF7B2TdHgCcTv5VAZhovSRJb",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/attendees/3156",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"attendees",
								"3156"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}