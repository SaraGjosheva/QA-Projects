{
	"info": {
		"_postman_id": "3dc9da03-388e-48ba-aadd-f8a3ae947b45",
		"name": "Rest API Homework - Sara Gjosheva",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33595671"
	},
	"item": [
		{
			"name": "End-to-end flow",
			"item": [
				{
					"name": "Create a pet",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var random = Math.floor(Math.random()*100000);\r",
									"pm.environment.set(\"randomId\", random);\r",
									"\r",
									"var randomCategory = Math.floor(Math.random()*100);\r",
									"pm.environment.set(\"randomCategoryId\", randomCategory);\r",
									"\r",
									"var randomTag = Math.floor(Math.random()*100);\r",
									"pm.environment.set(\"randomTagId\", randomTag);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": {{randomId}},\r\n  \"name\": \"doggie\",\r\n  \"category\": {\r\n    \"id\": {{randomCategoryId}},\r\n    \"name\": \"Dogs\"\r\n  },\r\n  \"photoUrls\": [\r\n    \"string\"\r\n  ],\r\n  \"tags\": [\r\n    {\r\n      \"id\": {{randomTagId}},\r\n      \"name\": \"wu wu\"\r\n    }\r\n  ],\r\n  \"status\": \"available\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/pet",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check the pet",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/pet/{{randomId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet",
								"{{randomId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update the pet",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.get(\"randomId\");\r",
									"pm.environment.get(\"randomCategoryId\");\r",
									"pm.environment.get(\"randomTagId\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": {{randomId}},\r\n  \"name\": \"Max\",\r\n  \"category\": {\r\n    \"id\":{{randomCategoryId}},\r\n    \"name\": \"Dogs\"\r\n  },\r\n  \"photoUrls\": [\r\n    \"string\"\r\n  ],\r\n  \"tags\": [\r\n    {\r\n      \"id\": {{randomTagId}},\r\n      \"name\": \"Wu wu\"\r\n    }\r\n  ],\r\n  \"status\": \"available\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/pet",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check the pet",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/pet/{{randomId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet",
								"{{randomId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete the pet",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "api_key",
									"type": "string"
								},
								{
									"key": "key",
									"value": "api_key",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/pet/{{randomId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet",
								"{{randomId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check if the pet is deleted",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/pet/{{randomId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet",
								"{{randomId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Positive Scenarios - Happy Path",
			"item": [
				{
					"name": "Create a pet",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var random = Math.floor(Math.random()*100000);\r",
									"pm.environment.set(\"randomId\", random);\r",
									"\r",
									"var randomCategory = Math.floor(Math.random()*100);\r",
									"pm.environment.set(\"randomCategoryId\", randomCategory);\r",
									"\r",
									"var randomTag = Math.floor(Math.random()*100);\r",
									"pm.environment.set(\"randomTagId\", randomTag);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify that response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that response time not above than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.not.be.above(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that is successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that status code is not one of 400, 403, 404, 405, 415 (Client Error)\", function () {\r",
									"    pm.expect(pm.response.code).to.not.be.oneOf([400, 403, 404, 405, 415]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that status code is not 500 or 503 (Server Error)\", function () {\r",
									"    pm.response.to.not.have.status([500, 503]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Connection is present\", function () {\r",
									"    pm.response.to.have.header(\"Connection\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Server is present\", function () {\r",
									"    pm.response.to.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Methods is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Methods\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Headers is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Headers\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Date is present\", function () {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Content-Length is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Length\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Origin is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Expose-Headers is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Expose-Headers\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that User-Agent is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"User-Agent\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Host is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Host\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Accept-Encoding is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Accept-Encoding\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Postman-Token is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Postman-Token\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Accept is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Accept\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that API key is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"api_key\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that response body matches string (category name)\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Cats\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify pet id\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"randomId\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify category id\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.category.id).to.eql(pm.environment.get(\"randomCategoryId\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify tags id\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.tags[0].id).to.eql(pm.environment.get(\"randomTagId\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify pet id, category id and tags id\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"randomId\"));\r",
									"    pm.expect(jsonData.category.id).to.eql(pm.environment.get(\"randomCategoryId\"));\r",
									"    pm.expect(jsonData.tags[0].id).to.eql(pm.environment.get(\"randomTagId\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify pet name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(\"Leo\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify tags name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.tags[0].name).to.eql(\"Maow maow\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify status is available\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status).to.eql(\"available\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify status is not sold\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status).to.not.eql(\"sold\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify status is not pending\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status).to.not.eql(\"pending\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": {{randomId}},\r\n  \"name\": \"Leo\",\r\n  \"category\": {\r\n    \"id\": {{randomCategoryId}},\r\n    \"name\": \"Cats\"\r\n  },\r\n  \"photoUrls\": [\r\n    \"string\"\r\n  ],\r\n  \"tags\": [\r\n    {\r\n      \"id\": {{randomTagId}},\r\n      \"name\": \"Maow maow\"\r\n    }\r\n  ],\r\n  \"status\": \"available\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/pet",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check the pet",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify that response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that response time not above than 400ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.not.be.above(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that is successful GET request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that status code is not one of 400, 403, 404, 405, 415 (Client Error)\", function () {\r",
									"    pm.expect(pm.response.code).to.not.be.oneOf([400, 403, 404, 405, 415]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that status code is not 500 or 503 (Server Error)\", function () {\r",
									"    pm.response.to.not.have.status([500, 503]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Connection is present\", function () {\r",
									"    pm.response.to.have.header(\"Connection\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Server is present\", function () {\r",
									"    pm.response.to.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Methods is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Methods\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Headers is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Headers\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Date is present\", function () {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Content-Length is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Length\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Origin is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Expose-Headers is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Expose-Headers\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that User-Agent is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"User-Agent\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Host is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Host\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Accept-Encoding is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Accept-Encoding\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Postman-Token is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Postman-Token\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Accept is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Accept\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that API key is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"api_key\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that response body matches string (category name)\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Cats\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify pet id\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"randomId\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify category id\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.category.id).to.eql(pm.environment.get(\"randomCategoryId\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify tags id\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.tags[0].id).to.eql(pm.environment.get(\"randomTagId\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify pet id, category id and tags id\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"randomId\"));\r",
									"    pm.expect(jsonData.category.id).to.eql(pm.environment.get(\"randomCategoryId\"));\r",
									"    pm.expect(jsonData.tags[0].id).to.eql(pm.environment.get(\"randomTagId\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify pet name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(\"Leo\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify tags name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.tags[0].name).to.eql(\"Maow maow\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify status is available\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status).to.eql(\"available\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify status is not sold\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status).to.not.eql(\"sold\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify status is not pending\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status).to.not.eql(\"pending\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/pet/{{randomId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet",
								"{{randomId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update the pet",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.get(\"randomId\");\r",
									"pm.environment.get(\"randomCategoryId\");\r",
									"pm.environment.get(\"randomTagId\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify that response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that response time not above than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.not.be.above(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that is successful PUT request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that status code is not one of 400, 403, 404, 405, 415 (Client Error)\", function () {\r",
									"    pm.expect(pm.response.code).to.not.be.oneOf([400, 403, 404, 405, 415]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that status code is not 500 or 503 (Server Error)\", function () {\r",
									"    pm.response.to.not.have.status([500, 503]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Connection is present\", function () {\r",
									"    pm.response.to.have.header(\"Connection\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Server is present\", function () {\r",
									"    pm.response.to.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Methods is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Methods\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Headers is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Headers\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Date is present\", function () {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Content-Length is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Length\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Origin is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Expose-Headers is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Expose-Headers\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that User-Agent is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"User-Agent\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Host is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Host\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Accept-Encoding is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Accept-Encoding\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Postman-Token is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Postman-Token\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Accept is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Accept\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that API key is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"api_key\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that response body matches string (category name)\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Cats\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify pet id\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"randomId\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify category id\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.category.id).to.eql(pm.environment.get(\"randomCategoryId\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify tags id\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.tags[0].id).to.eql(pm.environment.get(\"randomTagId\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify pet id, category id and tags id\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"randomId\"));\r",
									"    pm.expect(jsonData.category.id).to.eql(pm.environment.get(\"randomCategoryId\"));\r",
									"    pm.expect(jsonData.tags[0].id).to.eql(pm.environment.get(\"randomTagId\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify pet name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(\"Leo\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify tags name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.tags[0].name).to.eql(\"Maow\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify status is not available\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status).to.not.eql(\"available\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify status is not pending\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status).to.not.eql(\"pending\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify status is sold\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status).to.eql(\"sold\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": {{randomId}},\r\n  \"name\": \"Leo\",\r\n  \"category\": {\r\n    \"id\": {{randomCategoryId}},\r\n    \"name\": \"Cats\"\r\n  },\r\n  \"photoUrls\": [\r\n    \"string\"\r\n  ],\r\n  \"tags\": [\r\n    {\r\n      \"id\": {{randomTagId}},\r\n      \"name\": \"Maow\"\r\n    }\r\n  ],\r\n  \"status\": \"sold\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/pet",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check the pet",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify that response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that response time not above than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.not.be.above(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that is successful GET request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that status code is not one of 400, 403, 404, 405, 415 (Client Error)\", function () {\r",
									"    pm.expect(pm.response.code).to.not.be.oneOf([400, 403, 404, 405, 415]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that status code is not 500 or 503 (Server Error)\", function () {\r",
									"    pm.response.to.not.have.status([500, 503]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Connection is present\", function () {\r",
									"    pm.response.to.have.header(\"Connection\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Server is present\", function () {\r",
									"    pm.response.to.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Methods is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Methods\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Headers is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Headers\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Date is present\", function () {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Content-Length is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Length\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Origin is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Expose-Headers is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Expose-Headers\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that User-Agent is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"User-Agent\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Host is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Host\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Accept-Encoding is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Accept-Encoding\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Postman-Token is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Postman-Token\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Accept is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Accept\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that API key is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"api_key\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that response body matches string (category name)\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Cats\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify pet id\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"randomId\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify category id\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.category.id).to.eql(pm.environment.get(\"randomCategoryId\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify tags id\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.tags[0].id).to.eql(pm.environment.get(\"randomTagId\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify pet id, category id and tags id\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"randomId\"));\r",
									"    pm.expect(jsonData.category.id).to.eql(pm.environment.get(\"randomCategoryId\"));\r",
									"    pm.expect(jsonData.tags[0].id).to.eql(pm.environment.get(\"randomTagId\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify pet name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(\"Leo\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify tags name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.tags[0].name).to.eql(\"Maow\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify status is not available\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status).to.not.eql(\"available\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify status is not pending\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status).to.not.eql(\"pending\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify status is sold\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status).to.eql(\"sold\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/pet/{{randomId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet",
								"{{randomId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete the pet",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify that response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that response time not above than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.not.be.above(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that is successful DELETE request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that status code is not one of 400, 403, 404, 405, 415 (Client Error)\", function () {\r",
									"    pm.expect(pm.response.code).to.not.be.oneOf([400, 403, 404, 405, 415]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that status code is not 500 or 503 (Server Error)\", function () {\r",
									"    pm.response.to.not.have.status([500, 503]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Connection is present\", function () {\r",
									"    pm.response.to.have.header(\"Connection\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Server is present\", function () {\r",
									"    pm.response.to.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Methods is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Methods\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Headers is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Headers\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Date is present\", function () {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Content-Length is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Length\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Origin is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Expose-Headers is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Expose-Headers\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that User-Agent is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"User-Agent\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Host is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Host\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Accept-Encoding is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Accept-Encoding\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Postman-Token is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Postman-Token\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Accept is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Accept\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that API key is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"api_key\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that response body matches string that pet is deleted\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Pet deleted\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "api_key",
									"type": "string"
								},
								{
									"key": "key",
									"value": "api_key",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/pet/{{randomId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet",
								"{{randomId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check if the pet is deleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify that response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that response time not above than 400ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.not.be.above(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that is client error in GET request after deleting a pet, because the pet does not exist  anymore\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that status code is not one of 200, 201, 204 (Successful)\", function () {\r",
									"    pm.expect(pm.response.code).to.not.be.oneOf([200, 201, 204]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that status code is not 500 or 503 (Server Error)\", function () {\r",
									"    pm.response.to.not.have.status([500, 503]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Connection is present\", function () {\r",
									"    pm.response.to.have.header(\"Connection\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Server is present\", function () {\r",
									"    pm.response.to.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Methods is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Methods\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Headers is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Headers\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Date is present\", function () {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Content-Length is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Length\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Origin is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Expose-Headers is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Expose-Headers\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that User-Agent is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"User-Agent\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Host is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Host\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Accept-Encoding is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Accept-Encoding\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Postman-Token is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Postman-Token\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Accept is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Accept\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that API key is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"api_key\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that response body matches string that pet is not found after deleting it\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Pet not found\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/pet/{{randomId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet",
								"{{randomId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Negative  Scenarios",
			"item": [
				{
					"name": "415 - selected Text in Body to write but sent and required JSON",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var random = Math.floor(Math.random()*100000);\r",
									"pm.environment.set(\"randomId\", random);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify that response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that response time not above than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.not.be.above(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that is unsuccessful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.not.be.oneOf([200, 201, 204]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that there is unsupported media type in POST request, after selecting Text to write in Body - raw\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([415, 404, 405]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that status code is not 500 or 503 (Server Error)\", function () {\r",
									"    pm.response.to.not.have.status([500, 503]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Connection is present\", function () {\r",
									"    pm.response.to.have.header(\"Connection\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Server is present\", function () {\r",
									"    pm.response.to.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Methods is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Methods\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Headers is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Headers\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Date is present\", function () {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Content-Length is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Length\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Origin is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Expose-Headers is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Expose-Headers\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that User-Agent is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"User-Agent\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Host is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Host\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Accept-Encoding is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Accept-Encoding\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Postman-Token is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Postman-Token\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Accept is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Accept\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that API key is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"api_key\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Bearer-Token is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Bearer-Token\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": {{randomId}},\r\n  \"name\": \"doggie\",\r\n  \"category\": {\r\n    \"id\": 1,\r\n    \"name\": \"Dogs\"\r\n  },\r\n  \"photoUrls\": [\r\n    \"string\"\r\n  ],\r\n  \"tags\": [\r\n    {\r\n      \"id\": 0,\r\n      \"name\": \"aw aw\"\r\n    }\r\n  ],\r\n  \"status\": \"available\"\r\n}",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/pet",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet"
							]
						}
					},
					"response": []
				},
				{
					"name": "415 - selected JavaScript in Body",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify that response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that response time not above than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.not.be.above(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that is unsuccessful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.not.be.oneOf([200, 201, 204]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that there is unsupported media type in POST request, after selecting JavaScript to write in Body - raw\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([415, 404, 405]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that status code is not 500 or 503 (Server Error)\", function () {\r",
									"    pm.response.to.not.have.status([500, 503]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Connection is present\", function () {\r",
									"    pm.response.to.have.header(\"Connection\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Server is present\", function () {\r",
									"    pm.response.to.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Methods is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Methods\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Headers is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Headers\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Date is present\", function () {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Content-Length is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Length\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Origin is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Expose-Headers is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Expose-Headers\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that User-Agent is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"User-Agent\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Host is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Host\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Accept-Encoding is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Accept-Encoding\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Postman-Token is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Postman-Token\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Accept is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Accept\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that API key is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"api_key\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Bearer-Token is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Bearer-Token\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 9223372036854775807,\r\n  \"name\": 12,\r\n  \"category\": {\r\n    \"id\": 1,\r\n    \"name\": \"Dogs\"\r\n  },\r\n  \"photoUrls\": [\r\n    \"string\"\r\n  ],\r\n  \"tags\": [\r\n    {\r\n      \"id\": 0,\r\n      \"name\": \"aw aw\"\r\n    }\r\n  ],\r\n  \"status\": \"available\"\r\n}",
							"options": {
								"raw": {
									"language": "javascript"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/pet",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet"
							]
						}
					},
					"response": []
				},
				{
					"name": "415 - selected HTML in Body but sending JSON",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify that response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that response time not above than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.not.be.above(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that is unsuccessful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.not.be.oneOf([200, 201, 204]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that there is unsupported media type in POST request, after selecting HTML to write in Body - raw\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([415, 404, 405]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that status code is not 500 or 503 (Server Error)\", function () {\r",
									"    pm.response.to.not.have.status([500, 503]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Connection is present\", function () {\r",
									"    pm.response.to.have.header(\"Connection\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Server is present\", function () {\r",
									"    pm.response.to.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Methods is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Methods\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Headers is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Headers\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Date is present\", function () {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Content-Length is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Length\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Origin is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Expose-Headers is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Expose-Headers\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that User-Agent is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"User-Agent\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Host is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Host\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Accept-Encoding is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Accept-Encoding\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Postman-Token is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Postman-Token\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Accept is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Accept\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that API key is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"api_key\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Bearer-Token is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Bearer-Token\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 9223372036854775807,\r\n  \"name\": 12,\r\n  \"category\": {\r\n    \"id\": 1,\r\n    \"name\": \"Dogs\"\r\n  },\r\n  \"photoUrls\": [\r\n    \"string\"\r\n  ],\r\n  \"tags\": [\r\n    {\r\n      \"id\": 0,\r\n      \"name\": \"aw aw\"\r\n    }\r\n  ],\r\n  \"status\": \"available\"\r\n}",
							"options": {
								"raw": {
									"language": "html"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/pet",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet"
							]
						}
					},
					"response": []
				},
				{
					"name": "400 - selected XML in Body",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify that response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that response time not above than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.not.be.above(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that is unsuccessful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.not.be.oneOf([200, 201, 204]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that there is bad request, after selecting XML to write in Body - raw\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([400, 404, 405]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that status code is not 500 or 503 (Server Error)\", function () {\r",
									"    pm.response.to.not.have.status([500, 503]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Connection is present\", function () {\r",
									"    pm.response.to.have.header(\"Connection\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Server is present\", function () {\r",
									"    pm.response.to.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Methods is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Methods\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Headers is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Headers\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Date is present\", function () {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Content-Length is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Length\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Origin is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Expose-Headers is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Expose-Headers\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that User-Agent is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"User-Agent\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Host is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Host\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Accept-Encoding is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Accept-Encoding\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Postman-Token is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Postman-Token\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Accept is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Accept\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that API key is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"api_key\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Bearer-Token is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Bearer-Token\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 9223372036854775807,\r\n  \"name\": 12,\r\n  \"category\": {\r\n    \"id\": 1,\r\n    \"name\": \"Dogs\"\r\n  },\r\n  \"photoUrls\": [\r\n    \"string\"\r\n  ],\r\n  \"tags\": [\r\n    {\r\n      \"id\": 0,\r\n      \"name\": \"aw aw\"\r\n    }\r\n  ],\r\n  \"status\": \"available\"\r\n}",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/pet",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet"
							]
						}
					},
					"response": []
				},
				{
					"name": "400 - string in integer field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify that response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that response time not above than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.not.be.above(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that is unsuccessful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.not.be.oneOf([200, 201, 204]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that there is bad request, after writing string in integer field in the Body\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([400, 404, 405]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that status code is not 500 or 503 (Server Error)\", function () {\r",
									"    pm.response.to.not.have.status([500, 503]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Connection is present\", function () {\r",
									"    pm.response.to.have.header(\"Connection\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Server is present\", function () {\r",
									"    pm.response.to.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Methods is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Methods\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Headers is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Headers\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Date is present\", function () {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Content-Length is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Length\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Origin is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Expose-Headers is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Expose-Headers\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that User-Agent is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"User-Agent\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Host is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Host\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Accept-Encoding is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Accept-Encoding\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Postman-Token is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Postman-Token\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Accept is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Accept\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that API key is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"api_key\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Bearer-Token is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Bearer-Token\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 12131s,\r\n  \"name\": \"doggie\",\r\n  \"category\": {\r\n    \"id\": 1,\r\n    \"name\": \"Dogs\"\r\n  },\r\n  \"photoUrls\": [\r\n    \"string\"\r\n  ],\r\n  \"tags\": [\r\n    {\r\n      \"id\": 0,\r\n      \"name\": \"aw aw\"\r\n    }\r\n  ],\r\n  \"status\": \"available\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/pet",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet"
							]
						}
					},
					"response": []
				},
				{
					"name": "400 - special characters in integer field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify that response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that response time not above than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.not.be.above(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that is unsuccessful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.not.be.oneOf([200, 201, 204]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that there is bad request, after writing special characters in integer field in the Body\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([400, 404, 405]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that status code is not 500 or 503 (Server Error)\", function () {\r",
									"    pm.response.to.not.have.status([500, 503]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Connection is present\", function () {\r",
									"    pm.response.to.have.header(\"Connection\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Server is present\", function () {\r",
									"    pm.response.to.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Methods is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Methods\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Headers is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Headers\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Date is present\", function () {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Content-Length is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Length\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Origin is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Expose-Headers is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Expose-Headers\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that User-Agent is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"User-Agent\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Host is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Host\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Accept-Encoding is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Accept-Encoding\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Postman-Token is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Postman-Token\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Accept is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Accept\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that API key is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"api_key\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Bearer-Token is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Bearer-Token\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 12131122,\r\n  \"name\": \"doggie\",\r\n  \"category\": {\r\n    \"id\": 1:!!,\r\n    \"name\": \"Dogs\"\r\n  },\r\n  \"photoUrls\": [\r\n    \"string\"\r\n  ],\r\n  \"tags\": [\r\n    {\r\n      \"id\": 0,\r\n      \"name\": \"aw aw\"\r\n    }\r\n  ],\r\n  \"status\": \"available\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/pet",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet"
							]
						}
					},
					"response": []
				},
				{
					"name": "400 - invalid method send for POST",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify that response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that response time not above than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.not.be.above(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that is unsuccessful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.not.be.oneOf([200, 201, 204]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that there is bad request, after sending invalid HTTP method (sent method for GET)\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([400, 404, 405]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that status code is not 500 or 503 (Server Error)\", function () {\r",
									"    pm.response.to.not.have.status([500, 503]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Connection is present\", function () {\r",
									"    pm.response.to.have.header(\"Connection\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Server is present\", function () {\r",
									"    pm.response.to.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Methods is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Methods\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Headers is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Headers\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Date is present\", function () {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Content-Length is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Length\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Origin is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Expose-Headers is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Expose-Headers\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that User-Agent is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"User-Agent\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Host is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Host\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Accept-Encoding is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Accept-Encoding\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Postman-Token is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Postman-Token\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Accept is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Accept\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that API key is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"api_key\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Bearer-Token is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Bearer-Token\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 111212,\r\n  \"name\": \"doggie\",\r\n  \"category\": {\r\n    \"id\": 1,\r\n    \"name\": \"Dogs\"\r\n  },\r\n  \"photoUrls\": [\r\n    \"string\"\r\n  ],\r\n  \"tags\": [\r\n    {\r\n      \"id\": 0,\r\n      \"name\": \"aw aw\"\r\n    }\r\n  ],\r\n  \"status\": \"available\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/pet/2021212",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet",
								"2021212"
							]
						}
					},
					"response": []
				},
				{
					"name": "400 - should be bad request, because 'status' accept string but only array from three elements [available, pending, sold]",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var random = Math.floor(Math.random()*100000);\r",
									"pm.environment.set(\"randomId\", random);\r",
									"\r",
									"var randomCategory = Math.floor(Math.random()*100);\r",
									"pm.environment.set(\"randomCategoryId\", randomCategory);\r",
									"\r",
									"var randomTag = Math.floor(Math.random()*100);\r",
									"pm.environment.set(\"randomTagId\", randomTag);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify that response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that response time not above than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.not.be.above(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that is unsuccessful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.not.be.oneOf([200, 201, 204]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that there is bad request.\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([400, 404, 405]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that status code is not 500 or 503 (Server Error)\", function () {\r",
									"    pm.response.to.not.have.status([500, 503]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Connection is present\", function () {\r",
									"    pm.response.to.have.header(\"Connection\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Server is present\", function () {\r",
									"    pm.response.to.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Methods is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Methods\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Headers is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Headers\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Date is present\", function () {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Content-Length is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Length\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Origin is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Expose-Headers is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Expose-Headers\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that User-Agent is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"User-Agent\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Host is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Host\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Accept-Encoding is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Accept-Encoding\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Postman-Token is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Postman-Token\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Accept is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Accept\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that API key is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"api_key\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Bearer-Token is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Bearer-Token\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": {{randomId}},\r\n  \"name\": \"doggie\",\r\n  \"category\": {\r\n    \"id\": {{randomCategoryId}},\r\n    \"name\": \"Dogs\"\r\n  },\r\n  \"photoUrls\": [\r\n    \"string\"\r\n  ],\r\n  \"tags\": [\r\n    {\r\n      \"id\": {{randomTagId}},\r\n      \"name\": \"aw\"\r\n    }\r\n  ],\r\n  \"status\": \"not available\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/pet",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet"
							]
						}
					},
					"response": []
				},
				{
					"name": "400 - BVA, Negative number in id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify that response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that response time not above than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.not.be.above(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that is unsuccessful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.not.be.oneOf([200, 201, 204]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that there is bad request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([400, 404, 405]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that status code is not 500 or 503 (Server Error)\", function () {\r",
									"    pm.response.to.not.have.status([500, 503]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Connection is present\", function () {\r",
									"    pm.response.to.have.header(\"Connection\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Server is present\", function () {\r",
									"    pm.response.to.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Methods is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Methods\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Headers is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Headers\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Date is present\", function () {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Content-Length is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Length\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Origin is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Expose-Headers is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Expose-Headers\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that User-Agent is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"User-Agent\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Host is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Host\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Accept-Encoding is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Accept-Encoding\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Postman-Token is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Postman-Token\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Accept is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Accept\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that API key is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"api_key\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Bearer-Token is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Bearer-Token\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": -9223372036854775809,\r\n  \"name\": \"doggie\",\r\n  \"category\": {\r\n    \"id\": 1,\r\n    \"name\": \"Dogs\"\r\n  },\r\n  \"photoUrls\": [\r\n    \"string\"\r\n  ],\r\n  \"tags\": [\r\n    {\r\n      \"id\": 0,\r\n      \"name\": \"aw aw\"\r\n    }\r\n  ],\r\n  \"status\": \"available\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/pet",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet"
							]
						}
					},
					"response": []
				},
				{
					"name": "400 - BVA, bigger then integer64 range (long)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify that response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that response time not above than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.not.be.above(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that is unsuccessful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.not.be.oneOf([200, 201, 204]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that there is bad request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([400, 404, 405]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that status code is not 500 or 503 (Server Error)\", function () {\r",
									"    pm.response.to.not.have.status([500, 503]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Connection is present\", function () {\r",
									"    pm.response.to.have.header(\"Connection\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Server is present\", function () {\r",
									"    pm.response.to.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Methods is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Methods\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Headers is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Headers\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Date is present\", function () {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Content-Length is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Length\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Origin is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Expose-Headers is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Expose-Headers\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that User-Agent is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"User-Agent\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Host is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Host\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Accept-Encoding is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Accept-Encoding\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Postman-Token is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Postman-Token\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Accept is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Accept\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that API key is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"api_key\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Bearer-Token is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Bearer-Token\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 9223372036854775808,\r\n  \"name\": \"doggie\",\r\n  \"category\": {\r\n    \"id\": 1,\r\n    \"name\": \"Dogs\"\r\n  },\r\n  \"photoUrls\": [\r\n    \"string\"\r\n  ],\r\n  \"tags\": [\r\n    {\r\n      \"id\": 0,\r\n      \"name\": \"aw aw\"\r\n    }\r\n  ],\r\n  \"status\": \"available\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/pet",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet"
							]
						}
					},
					"response": []
				},
				{
					"name": "400 - empty required body",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify that response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that response time not above than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.not.be.above(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that is unsuccessful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.not.be.oneOf([200, 201, 204]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that there is bad request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([400, 404, 405]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that status code is not 500 or 503 (Server Error)\", function () {\r",
									"    pm.response.to.not.have.status([500, 503]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Connection is present\", function () {\r",
									"    pm.response.to.have.header(\"Connection\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Server is present\", function () {\r",
									"    pm.response.to.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Methods is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Methods\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Headers is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Headers\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Date is present\", function () {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Content-Length is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Content-Length\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Origin is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Expose-Headers is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Expose-Headers\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that User-Agent is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"User-Agent\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Host is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Host\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Accept-Encoding is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Accept-Encoding\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Postman-Token is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Postman-Token\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Accept is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Accept\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that API key is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"api_key\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Bearer-Token is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Bearer-Token\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/pet",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet"
							]
						}
					},
					"response": []
				},
				{
					"name": "404 - incorrect end point (url)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify that response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that response time not above than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.not.be.above(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that is unsuccessful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.not.be.oneOf([200, 201, 204]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that, data not found\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([404, 400, 405]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that status code is not 500 or 503 (Server Error)\", function () {\r",
									"    pm.response.to.not.have.status([500, 503]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Connection is present\", function () {\r",
									"    pm.response.to.have.header(\"Connection\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Server is present\", function () {\r",
									"    pm.response.to.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Methods is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Methods\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Headers is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Headers\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Date is present\", function () {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Content-Length is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Content-Length\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Origin is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Expose-Headers is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Access-Control-Expose-Headers\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that User-Agent is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"User-Agent\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Host is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Host\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Accept-Encoding is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Accept-Encoding\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Postman-Token is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Postman-Token\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Accept is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Accept\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that API key is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"api_key\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Bearer-Token is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Bearer-Token\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Content-Security-Policy is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Security-Policy\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Vary is present\", function () {\r",
									"    pm.response.to.have.header(\"Vary\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 111212,\r\n  \"name\": \"doggie\",\r\n  \"category\": {\r\n    \"id\": 1,\r\n    \"name\": \"Dogs\"\r\n  },\r\n  \"photoUrls\": [\r\n    \"string\"\r\n  ],\r\n  \"tags\": [\r\n    {\r\n      \"id\": 0,\r\n      \"name\": \"aw aw\"\r\n    }\r\n  ],\r\n  \"status\": \"available\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://petstore.swagger.io/v1/pet",
							"protocol": "https",
							"host": [
								"petstore",
								"swagger",
								"io"
							],
							"path": [
								"v1",
								"pet"
							]
						}
					},
					"response": []
				},
				{
					"name": "404 - not existing method send",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify that response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that response time not above than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.not.be.above(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that is unsuccessful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.not.be.oneOf([200, 201, 204]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that, data not found\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([404, 400, 405]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that status code is not 500 or 503 (Server Error)\", function () {\r",
									"    pm.response.to.not.have.status([500, 503]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Connection is present\", function () {\r",
									"    pm.response.to.have.header(\"Connection\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Server is present\", function () {\r",
									"    pm.response.to.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Methods is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Methods\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Headers is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Headers\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Date is present\", function () {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Content-Length is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Length\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Origin is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Expose-Headers is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Expose-Headers\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that User-Agent is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"User-Agent\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Host is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Host\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Accept-Encoding is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Accept-Encoding\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Postman-Token is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Postman-Token\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Accept is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Accept\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that API key is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"api_key\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Bearer-Token is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Bearer-Token\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Content-Security-Policy is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Content-Security-Policy\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Vary is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Vary\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 111212,\r\n  \"name\": \"doggie\",\r\n  \"category\": {\r\n    \"id\": 1,\r\n    \"name\": \"Dogs\"\r\n  },\r\n  \"photoUrls\": [\r\n    \"string\"\r\n  ],\r\n  \"tags\": [\r\n    {\r\n      \"id\": 0,\r\n      \"name\": \"aw aw\"\r\n    }\r\n  ],\r\n  \"status\": \"available\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/pettts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pettts"
							]
						}
					},
					"response": []
				},
				{
					"name": "404 - incorrect end point",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify that response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that response time not above than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.not.be.above(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that is unsuccessful GET request\", function () {\r",
									"    pm.expect(pm.response.code).to.not.be.oneOf([200, 201, 204]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Data Not Found\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([400, 404, 405]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that status code is not 500 or 503 (Server Error)\", function () {\r",
									"    pm.response.to.not.have.status([500, 503]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Connection is present\", function () {\r",
									"    pm.response.to.have.header(\"Connection\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Server is present\", function () {\r",
									"    pm.response.to.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Methods is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Methods\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Headers is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Headers\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Date is present\", function () {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Content-Length is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Length\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Origin is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Expose-Headers is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Expose-Headers\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that User-Agent is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"User-Agent\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Host is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Host\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Accept-Encoding is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Accept-Encoding\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Postman-Token is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Postman-Token\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Accept is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Accept\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that API key is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"api_key\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Bearer-Token is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Bearer-Token\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://petstore3.swagger.io/api/v121/pet/9223372036854775807",
							"protocol": "https",
							"host": [
								"petstore3",
								"swagger",
								"io"
							],
							"path": [
								"api",
								"v121",
								"pet",
								"9223372036854775807"
							]
						}
					},
					"response": []
				},
				{
					"name": "404 - not existing pet id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify that response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that response time not above than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.not.be.above(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that is unsuccessful GET request\", function () {\r",
									"    pm.expect(pm.response.code).to.not.be.oneOf([200, 201, 204]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that pet not found with not existing pet id\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([400, 404, 405]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that status code is not 500 or 503 (Server Error)\", function () {\r",
									"    pm.response.to.not.have.status([500, 503]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Connection is present\", function () {\r",
									"    pm.response.to.have.header(\"Connection\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Server is present\", function () {\r",
									"    pm.response.to.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Methods is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Methods\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Headers is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Headers\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Date is present\", function () {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Content-Length is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Length\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Origin is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Expose-Headers is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Expose-Headers\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that User-Agent is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"User-Agent\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Host is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Host\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Accept-Encoding is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Accept-Encoding\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Postman-Token is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Postman-Token\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Accept is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Accept\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that API key is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"api_key\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Bearer-Token is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Bearer-Token\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that response Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Pet not found\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/pet/922337203685412",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet",
								"922337203685412"
							]
						}
					},
					"response": []
				},
				{
					"name": "400 - invalid pet id (sent string)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify that response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that response time not above than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.not.be.above(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that is unsuccessful GET request\", function () {\r",
									"    pm.expect(pm.response.code).to.not.be.oneOf([200, 201, 204]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that there is bad request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([400, 404, 405]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that status code is not 500 or 503 (Server Error)\", function () {\r",
									"    pm.response.to.not.have.status([500, 503]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Connection is present\", function () {\r",
									"    pm.response.to.have.header(\"Connection\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Server is present\", function () {\r",
									"    pm.response.to.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Methods is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Methods\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Headers is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Headers\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Date is present\", function () {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Content-Length is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Length\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Origin is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Expose-Headers is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Expose-Headers\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that User-Agent is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"User-Agent\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Host is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Host\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Accept-Encoding is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Accept-Encoding\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Postman-Token is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Postman-Token\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Accept is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Accept\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that API key is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"api_key\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Bearer-Token is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Bearer-Token\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/pet/12121ss",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet",
								"12121ss"
							]
						}
					},
					"response": []
				},
				{
					"name": "400 - invalid pet id (special characters)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify that response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that response time not above than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.not.be.above(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that is unsuccessful GET request\", function () {\r",
									"    pm.expect(pm.response.code).to.not.be.oneOf([200, 201, 204]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that there is bad request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([400, 404, 405]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that status code is not 500 or 503 (Server Error)\", function () {\r",
									"    pm.response.to.not.have.status([500, 503]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Connection is present\", function () {\r",
									"    pm.response.to.have.header(\"Connection\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Server is present\", function () {\r",
									"    pm.response.to.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Methods is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Methods\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Headers is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Headers\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Date is present\", function () {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Content-Length is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Length\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Origin is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Expose-Headers is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Expose-Headers\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that User-Agent is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"User-Agent\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Host is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Host\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Accept-Encoding is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Accept-Encoding\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Postman-Token is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Postman-Token\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Accept is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Accept\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that API key is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"api_key\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Bearer-Token is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Bearer-Token\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/pet/121212121::1!",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet",
								"121212121::1!"
							]
						}
					},
					"response": []
				},
				{
					"name": "405 - incorrect method for GET",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify that response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that response time not above than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.not.be.above(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that is unsuccessful GET request\", function () {\r",
									"    pm.expect(pm.response.code).to.not.be.oneOf([200, 201, 204]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that there method not allowed\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([400, 404, 405]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that status code is not 500 or 503 (Server Error)\", function () {\r",
									"    pm.response.to.not.have.status([500, 503]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Connection is present\", function () {\r",
									"    pm.response.to.have.header(\"Connection\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Server is present\", function () {\r",
									"    pm.response.to.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Methods is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Methods\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Headers is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Headers\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Date is present\", function () {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Content-Length is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Length\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Origin is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Expose-Headers is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Expose-Headers\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that User-Agent is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"User-Agent\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Host is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Host\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Accept-Encoding is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Accept-Encoding\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Postman-Token is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Postman-Token\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Accept is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Accept\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that API key is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"api_key\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Bearer-Token is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Bearer-Token\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/pet",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet"
							]
						}
					},
					"response": []
				},
				{
					"name": "405 - sent method for POST (with body-raw filled with JSON)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify that response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that response time not above than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.not.be.above(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that is unsuccessful GET request\", function () {\r",
									"    pm.expect(pm.response.code).to.not.be.oneOf([200, 201, 204]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that there method not allowed\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([400, 404, 405]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that status code is not 500 or 503 (Server Error)\", function () {\r",
									"    pm.response.to.not.have.status([500, 503]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Connection is present\", function () {\r",
									"    pm.response.to.have.header(\"Connection\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Server is present\", function () {\r",
									"    pm.response.to.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Methods is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Methods\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Headers is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Headers\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Date is present\", function () {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Content-Length is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Length\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Origin is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Expose-Headers is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Expose-Headers\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that User-Agent is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"User-Agent\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Host is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Host\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Accept-Encoding is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Accept-Encoding\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Postman-Token is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Postman-Token\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Accept is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Accept\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that API key is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"api_key\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Bearer-Token is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Bearer-Token\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 12131,\r\n  \"name\": \"doggie\",\r\n  \"category\": {\r\n    \"id\": 1,\r\n    \"name\": \"Dogs\"\r\n  },\r\n  \"photoUrls\": [\r\n    \"string\"\r\n  ],\r\n  \"tags\": [\r\n    {\r\n      \"id\": 0,\r\n      \"name\": \"aw aw\"\r\n    }\r\n  ],\r\n  \"status\": \"available\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/pet",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet"
							]
						}
					},
					"response": []
				},
				{
					"name": "415 - selected Text in Body but entered and required JSON",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.get(\"randomId\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify that response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that response time not above than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.not.be.above(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that is unsuccessful PUT request\", function () {\r",
									"    pm.expect(pm.response.code).to.not.be.oneOf([200, 201, 204]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that there is unsupported media type\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([415, 400, 404, 405]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that status code is not 500 or 503 (Server Error)\", function () {\r",
									"    pm.response.to.not.have.status([500, 503]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Connection is present\", function () {\r",
									"    pm.response.to.have.header(\"Connection\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Server is present\", function () {\r",
									"    pm.response.to.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Methods is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Methods\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Headers is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Headers\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Date is present\", function () {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Content-Length is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Length\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Origin is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Expose-Headers is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Expose-Headers\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that User-Agent is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"User-Agent\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Host is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Host\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Accept-Encoding is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Accept-Encoding\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Postman-Token is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Postman-Token\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Accept is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Accept\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that API key is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"api_key\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Bearer-Token is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Bearer-Token\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": {{randomId}},\r\n  \"name\": \"doggie\",\r\n  \"category\": {\r\n    \"id\": 1,\r\n    \"name\": \"Dogs\"\r\n  },\r\n  \"photoUrls\": [\r\n    \"string\"\r\n  ],\r\n  \"tags\": [\r\n    {\r\n      \"id\": 0,\r\n      \"name\": \"Aw aw\"\r\n    }\r\n  ],\r\n  \"status\": \"available\"\r\n}",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/pet",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet"
							]
						}
					},
					"response": []
				},
				{
					"name": "415 - selected JavaScript in Body - raw",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify that response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that response time not above than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.not.be.above(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that is unsuccessful PUT request\", function () {\r",
									"    pm.expect(pm.response.code).to.not.be.oneOf([200, 201, 204]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that there is unsupported media type\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([415, 400, 404, 405]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that status code is not 500 or 503 (Server Error)\", function () {\r",
									"    pm.response.to.not.have.status([500, 503]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Connection is present\", function () {\r",
									"    pm.response.to.have.header(\"Connection\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Server is present\", function () {\r",
									"    pm.response.to.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Methods is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Methods\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Headers is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Headers\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Date is present\", function () {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Content-Length is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Length\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Origin is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Expose-Headers is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Expose-Headers\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that User-Agent is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"User-Agent\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Host is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Host\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Accept-Encoding is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Accept-Encoding\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Postman-Token is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Postman-Token\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Accept is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Accept\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that API key is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"api_key\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Bearer-Token is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Bearer-Token\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": {{randomId}},\r\n  \"name\": \"doggie\",\r\n  \"category\": {\r\n    \"id\": 1,\r\n    \"name\": \"Dogs\"\r\n  },\r\n  \"photoUrls\": [\r\n    \"string\"\r\n  ],\r\n  \"tags\": [\r\n    {\r\n      \"id\": 0,\r\n      \"name\": \"aw\"\r\n    }\r\n  ],\r\n  \"status\": \"available\"\r\n}",
							"options": {
								"raw": {
									"language": "javascript"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/pet",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet"
							]
						}
					},
					"response": []
				},
				{
					"name": "415 - selected HTML in Body - raw",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify that response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that response time not above than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.not.be.above(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that is unsuccessful PUT request\", function () {\r",
									"    pm.expect(pm.response.code).to.not.be.oneOf([200, 201, 204]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that there is unsupported media type\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([415, 400, 404, 405]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that status code is not 500 or 503 (Server Error)\", function () {\r",
									"    pm.response.to.not.have.status([500, 503]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Connection is present\", function () {\r",
									"    pm.response.to.have.header(\"Connection\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Server is present\", function () {\r",
									"    pm.response.to.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Methods is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Methods\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Headers is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Headers\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Date is present\", function () {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Content-Length is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Length\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Origin is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Expose-Headers is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Expose-Headers\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that User-Agent is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"User-Agent\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Host is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Host\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Accept-Encoding is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Accept-Encoding\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Postman-Token is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Postman-Token\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Accept is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Accept\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that API key is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"api_key\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Bearer-Token is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Bearer-Token\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": {{randomId}},\r\n  \"name\": \"doggie\",\r\n  \"category\": {\r\n    \"id\": 1,\r\n    \"name\": \"Dogs\"\r\n  },\r\n  \"photoUrls\": [\r\n    \"string\"\r\n  ],\r\n  \"tags\": [\r\n    {\r\n      \"id\": 0,\r\n      \"name\": \"string\"\r\n    }\r\n  ],\r\n  \"status\": \"available\"\r\n}",
							"options": {
								"raw": {
									"language": "html"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/pet",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet"
							]
						}
					},
					"response": []
				},
				{
					"name": "400 - selected XML in Body - raw",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify that response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that response time not above than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.not.be.above(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that is unsuccessful PUT request\", function () {\r",
									"    pm.expect(pm.response.code).to.not.be.oneOf([200, 201, 204]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that there is bad request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([415, 400, 404, 405]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that status code is not 500 or 503 (Server Error)\", function () {\r",
									"    pm.response.to.not.have.status([500, 503]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Connection is present\", function () {\r",
									"    pm.response.to.have.header(\"Connection\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Server is present\", function () {\r",
									"    pm.response.to.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Methods is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Methods\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Headers is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Headers\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Date is present\", function () {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Content-Length is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Length\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Origin is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Expose-Headers is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Expose-Headers\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that User-Agent is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"User-Agent\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Host is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Host\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Accept-Encoding is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Accept-Encoding\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Postman-Token is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Postman-Token\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Accept is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Accept\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that API key is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"api_key\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Bearer-Token is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Bearer-Token\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": {{randomId}},\r\n  \"name\": \"doggie\",\r\n  \"category\": {\r\n    \"id\": 1,\r\n    \"name\": \"Dogs\"\r\n  },\r\n  \"photoUrls\": [\r\n    \"string\"\r\n  ],\r\n  \"tags\": [\r\n    {\r\n      \"id\": 0,\r\n      \"name\": \"aw\"\r\n    }\r\n  ],\r\n  \"status\": \"available\"\r\n}",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/pet",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet"
							]
						}
					},
					"response": []
				},
				{
					"name": "400 - BVA, Negative number in id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify that response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that response time not above than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.not.be.above(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that is unsuccessful PUT request\", function () {\r",
									"    pm.expect(pm.response.code).to.not.be.oneOf([200, 201, 204]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that there is bad request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([415, 400, 404, 405]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that status code is not 500 or 503 (Server Error)\", function () {\r",
									"    pm.response.to.not.have.status([500, 503]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Connection is present\", function () {\r",
									"    pm.response.to.have.header(\"Connection\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Server is present\", function () {\r",
									"    pm.response.to.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Methods is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Methods\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Headers is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Headers\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Date is present\", function () {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Content-Length is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Length\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Origin is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Expose-Headers is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Expose-Headers\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that User-Agent is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"User-Agent\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Host is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Host\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Accept-Encoding is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Accept-Encoding\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Postman-Token is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Postman-Token\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Accept is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Accept\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that API key is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"api_key\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Bearer-Token is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Bearer-Token\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": -9223372036854775809,\r\n  \"name\": \"doggie\",\r\n  \"category\": {\r\n    \"id\": 1,\r\n    \"name\": \"Dogs\"\r\n  },\r\n  \"photoUrls\": [\r\n    \"string\"\r\n  ],\r\n  \"tags\": [\r\n    {\r\n      \"id\": 0,\r\n      \"name\": \"aw\"\r\n    }\r\n  ],\r\n  \"status\": \"pending\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/pet",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet"
							]
						}
					},
					"response": []
				},
				{
					"name": "400 - BVA, bigger range then what contains integer64",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify that response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that response time not above than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.not.be.above(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that is unsuccessful PUT request\", function () {\r",
									"    pm.expect(pm.response.code).to.not.be.oneOf([200, 201, 204]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that there is bad request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([415, 400, 404, 405]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that status code is not 500 or 503 (Server Error)\", function () {\r",
									"    pm.response.to.not.have.status([500, 503]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Connection is present\", function () {\r",
									"    pm.response.to.have.header(\"Connection\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Server is present\", function () {\r",
									"    pm.response.to.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Methods is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Methods\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Headers is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Headers\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Date is present\", function () {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Content-Length is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Length\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Origin is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Expose-Headers is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Expose-Headers\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that User-Agent is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"User-Agent\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Host is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Host\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Accept-Encoding is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Accept-Encoding\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Postman-Token is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Postman-Token\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Accept is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Accept\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that API key is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"api_key\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Bearer-Token is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Bearer-Token\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 468,\r\n  \"name\": \"doggie\",\r\n  \"category\": {\r\n    \"id\": 9223372036854775808,\r\n    \"name\": \"Dogs\"\r\n  },\r\n  \"photoUrls\": [\r\n    \"string\"\r\n  ],\r\n  \"tags\": [\r\n    {\r\n      \"id\": 112,\r\n      \"name\": \"aw\"\r\n    }\r\n  ],\r\n  \"status\": \"pending\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/pet",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet"
							]
						}
					},
					"response": []
				},
				{
					"name": "400 - string in integer field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify that response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that response time not above than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.not.be.above(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that is unsuccessful PUT request\", function () {\r",
									"    pm.expect(pm.response.code).to.not.be.oneOf([200, 201, 204]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that there is bad request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([415, 400, 404, 405]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that status code is not 500 or 503 (Server Error)\", function () {\r",
									"    pm.response.to.not.have.status([500, 503]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Connection is present\", function () {\r",
									"    pm.response.to.have.header(\"Connection\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Server is present\", function () {\r",
									"    pm.response.to.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Methods is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Methods\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Headers is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Headers\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Date is present\", function () {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Content-Length is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Length\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Origin is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Expose-Headers is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Expose-Headers\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that User-Agent is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"User-Agent\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Host is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Host\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Accept-Encoding is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Accept-Encoding\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Postman-Token is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Postman-Token\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Accept is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Accept\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that API key is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"api_key\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Bearer-Token is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Bearer-Token\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 468s,\r\n  \"name\": \"doggie\",\r\n  \"category\": {\r\n    \"id\": 1,\r\n    \"name\": \"Dogs\"\r\n  },\r\n  \"photoUrls\": [\r\n    \"string\"\r\n  ],\r\n  \"tags\": [\r\n    {\r\n      \"id\": 0,\r\n      \"name\": \"aw\"\r\n    }\r\n  ],\r\n  \"status\": \"sold\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/pet",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet"
							]
						}
					},
					"response": []
				},
				{
					"name": "400 - should be bad request, because attribute 'status' accept string but only array from three elements [available, pending, sold]",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.get(\"randomId\");\r",
									"pm.environment.get(\"randomCategoryId\");\r",
									"pm.environment.get(\"randomTagId\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify that response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that response time not above than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.not.be.above(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that is unsuccessful PUT request\", function () {\r",
									"    pm.expect(pm.response.code).to.not.be.oneOf([200, 201, 204]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that there is bad request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([415, 400, 404, 405]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that status code is not 500 or 503 (Server Error)\", function () {\r",
									"    pm.response.to.not.have.status([500, 503]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Connection is present\", function () {\r",
									"    pm.response.to.have.header(\"Connection\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Server is present\", function () {\r",
									"    pm.response.to.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Methods is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Methods\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Headers is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Headers\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Date is present\", function () {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Content-Length is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Length\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Origin is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Expose-Headers is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Expose-Headers\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that User-Agent is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"User-Agent\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Host is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Host\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Accept-Encoding is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Accept-Encoding\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Postman-Token is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Postman-Token\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Accept is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Accept\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that API key is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"api_key\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Bearer-Token is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Bearer-Token\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": {{randomId}},\r\n  \"name\": \"Max\",\r\n  \"category\": {\r\n    \"id\":{{randomCategoryId}},\r\n    \"name\": \"Dogs\"\r\n  },\r\n  \"photoUrls\": [\r\n    \"string\"\r\n  ],\r\n  \"tags\": [\r\n    {\r\n      \"id\": {{randomTagId}},\r\n      \"name\": \"Wu wu\"\r\n    }\r\n  ],\r\n  \"status\": \"not now\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/pet",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet"
							]
						}
					},
					"response": []
				},
				{
					"name": "400 - empty required body",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify that response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that response time not above than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.not.be.above(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that is unsuccessful PUT request\", function () {\r",
									"    pm.expect(pm.response.code).to.not.be.oneOf([200, 201, 204]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that there is bad request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([415, 400, 404, 405]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that status code is not 500 or 503 (Server Error)\", function () {\r",
									"    pm.response.to.not.have.status([500, 503]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Connection is present\", function () {\r",
									"    pm.response.to.have.header(\"Connection\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Server is present\", function () {\r",
									"    pm.response.to.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Methods is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Methods\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Headers is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Headers\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Date is present\", function () {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Content-Length is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Content-Length\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Origin is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Expose-Headers is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Expose-Headers\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that User-Agent is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"User-Agent\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Host is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Host\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Accept-Encoding is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Accept-Encoding\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Postman-Token is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Postman-Token\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Accept is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Accept\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that API key is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"api_key\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Bearer-Token is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Bearer-Token\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/pet",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet"
							]
						}
					},
					"response": []
				},
				{
					"name": "404 - incorrect end point",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify that response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that response time not above than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.not.be.above(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that is unsuccessful PUT request\", function () {\r",
									"    pm.expect(pm.response.code).to.not.be.oneOf([200, 201, 204]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that HTTP method is not found\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([415, 400, 404, 405]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that status code is not 500 or 503 (Server Error)\", function () {\r",
									"    pm.response.to.not.have.status([500, 503]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Connection is present\", function () {\r",
									"    pm.response.to.have.header(\"Connection\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Server is present\", function () {\r",
									"    pm.response.to.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Methods is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Methods\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Headers is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Headers\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Date is present\", function () {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Content-Length is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Length\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Origin is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Expose-Headers is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Expose-Headers\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that User-Agent is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"User-Agent\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Host is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Host\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Accept-Encoding is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Accept-Encoding\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Postman-Token is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Postman-Token\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Accept is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Accept\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that API key is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"api_key\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Bearer-Token is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Bearer-Token\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 1212121212,\r\n  \"name\": \"doggie\",\r\n  \"category\": {\r\n    \"id\": 1,\r\n    \"name\": \"Dogs\"\r\n  },\r\n  \"photoUrls\": [\r\n    \"string\"\r\n  ],\r\n  \"tags\": [\r\n    {\r\n      \"id\": 0,\r\n      \"name\": \"aw\"\r\n    }\r\n  ],\r\n  \"status\": \"sold\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://petstore3.swagger.io/api/v121/pet",
							"protocol": "https",
							"host": [
								"petstore3",
								"swagger",
								"io"
							],
							"path": [
								"api",
								"v121",
								"pet"
							]
						}
					},
					"response": []
				},
				{
					"name": "404 - not existing pet for update (not created yet)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify that response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that response time not above than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.not.be.above(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that is unsuccessful PUT request\", function () {\r",
									"    pm.expect(pm.response.code).to.not.be.oneOf([200, 201, 204]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that pet is not found\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([415, 400, 404, 405]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that status code is not 500 or 503 (Server Error)\", function () {\r",
									"    pm.response.to.not.have.status([500, 503]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Connection is present\", function () {\r",
									"    pm.response.to.have.header(\"Connection\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Server is present\", function () {\r",
									"    pm.response.to.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Methods is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Methods\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Headers is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Headers\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Date is present\", function () {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Content-Length is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Length\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Origin is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Expose-Headers is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Expose-Headers\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that User-Agent is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"User-Agent\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Host is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Host\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Accept-Encoding is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Accept-Encoding\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Postman-Token is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Postman-Token\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Accept is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Accept\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that API key is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"api_key\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Bearer-Token is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Bearer-Token\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that response body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Pet not found\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 46871,\r\n  \"name\": \"doggie\",\r\n  \"category\": {\r\n    \"id\": 1,\r\n    \"name\": \"Dogs\"\r\n  },\r\n  \"photoUrls\": [\r\n    \"string\"\r\n  ],\r\n  \"tags\": [\r\n    {\r\n      \"id\": 0,\r\n      \"name\": \"aw\"\r\n    }\r\n  ],\r\n  \"status\": \"sold\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/pet",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet"
							]
						}
					},
					"response": []
				},
				{
					"name": "404 - not existing method sent",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify that response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that response time not above than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.not.be.above(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that is unsuccessful PUT request\", function () {\r",
									"    pm.expect(pm.response.code).to.not.be.oneOf([200, 201, 204]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that HTTP method not found\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([415, 400, 404, 405]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that status code is not 500 or 503 (Server Error)\", function () {\r",
									"    pm.response.to.not.have.status([500, 503]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Connection is present\", function () {\r",
									"    pm.response.to.have.header(\"Connection\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Server is present\", function () {\r",
									"    pm.response.to.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Methods is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Methods\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Headers is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Headers\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Date is present\", function () {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Content-Length is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Length\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Origin is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Expose-Headers is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Expose-Headers\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that User-Agent is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"User-Agent\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Host is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Host\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Accept-Encoding is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Accept-Encoding\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Postman-Token is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Postman-Token\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Accept is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Accept\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that API key is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"api_key\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Bearer-Token is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Bearer-Token\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 468,\r\n  \"name\": \"doggie\",\r\n  \"category\": {\r\n    \"id\": 1,\r\n    \"name\": \"Dogs\"\r\n  },\r\n  \"photoUrls\": [\r\n    \"string\"\r\n  ],\r\n  \"tags\": [\r\n    {\r\n      \"id\": 0,\r\n      \"name\": \"aw\"\r\n    }\r\n  ],\r\n  \"status\": \"sold\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/petts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"petts"
							]
						}
					},
					"response": []
				},
				{
					"name": "405 - sent method for GET with filled body",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify that response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that response time not above than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.not.be.above(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that is unsuccessful PUT request\", function () {\r",
									"    pm.expect(pm.response.code).to.not.be.oneOf([200, 201, 204]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that there method not allowed\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([400, 404, 405]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that status code is not 500 or 503 (Server Error)\", function () {\r",
									"    pm.response.to.not.have.status([500, 503]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Connection is present\", function () {\r",
									"    pm.response.to.have.header(\"Connection\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Server is present\", function () {\r",
									"    pm.response.to.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Methods is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Methods\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Headers is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Headers\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Date is present\", function () {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Content-Length is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Length\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Origin is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Expose-Headers is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Expose-Headers\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that User-Agent is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"User-Agent\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Host is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Host\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Accept-Encoding is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Accept-Encoding\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Postman-Token is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Postman-Token\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Accept is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Accept\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that API key is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"api_key\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Bearer-Token is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Bearer-Token\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 468,\r\n  \"name\": \"doggie\",\r\n  \"category\": {\r\n    \"id\": 1,\r\n    \"name\": \"Dogs\"\r\n  },\r\n  \"photoUrls\": [\r\n    \"string\"\r\n  ],\r\n  \"tags\": [\r\n    {\r\n      \"id\": 0,\r\n      \"name\": \"aw\"\r\n    }\r\n  ],\r\n  \"status\": \"pending\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/pet/922337203685412",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet",
								"922337203685412"
							]
						}
					},
					"response": []
				},
				{
					"name": "405 - sent HTTP method for POST",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify that response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that response time not above than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.not.be.above(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that is unsuccessful DELETE request\", function () {\r",
									"    pm.expect(pm.response.code).to.not.be.oneOf([200, 201, 204]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that HTTP method is not allowed\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([415, 400, 404, 405]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that status code is not 500 or 503 (Server Error)\", function () {\r",
									"    pm.response.to.not.have.status([500, 503]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Connection is present\", function () {\r",
									"    pm.response.to.have.header(\"Connection\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Server is present\", function () {\r",
									"    pm.response.to.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Methods is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Methods\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Headers is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Headers\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Date is present\", function () {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Content-Length is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Length\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Origin is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Expose-Headers is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Expose-Headers\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that User-Agent is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"User-Agent\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Host is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Host\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Accept-Encoding is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Accept-Encoding\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Postman-Token is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Postman-Token\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Accept is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Accept\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that API key is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"api_key\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Bearer-Token is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Bearer-Token\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "api_key",
									"type": "string"
								},
								{
									"key": "key",
									"value": "api_key",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/pet",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet"
							]
						}
					},
					"response": []
				},
				{
					"name": "404 - not existing HTTP method sent",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify that response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that response time not above than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.not.be.above(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that is unsuccessful DELETE request\", function () {\r",
									"    pm.expect(pm.response.code).to.not.be.oneOf([200, 201, 204]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that HTTP method is not found\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([415, 400, 404, 405]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that status code is not 500 or 503 (Server Error)\", function () {\r",
									"    pm.response.to.not.have.status([500, 503]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Connection is present\", function () {\r",
									"    pm.response.to.have.header(\"Connection\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Server is present\", function () {\r",
									"    pm.response.to.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Methods is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Methods\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Headers is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Headers\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Date is present\", function () {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Content-Length is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Length\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Origin is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Expose-Headers is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Expose-Headers\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that User-Agent is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"User-Agent\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Host is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Host\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Accept-Encoding is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Accept-Encoding\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Postman-Token is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Postman-Token\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Accept is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Accept\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that API key is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"api_key\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Bearer-Token is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Bearer-Token\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/pettts/15151",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pettts",
								"15151"
							]
						}
					},
					"response": []
				},
				{
					"name": "404 - incorrect end point",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify that response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that response time not above than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.not.be.above(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that is unsuccessful DELETE request\", function () {\r",
									"    pm.expect(pm.response.code).to.not.be.oneOf([200, 201, 204]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that HTTP method is not found\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([415, 400, 404, 405]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that status code is not 500 or 503 (Server Error)\", function () {\r",
									"    pm.response.to.not.have.status([500, 503]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Connection is present\", function () {\r",
									"    pm.response.to.have.header(\"Connection\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Server is present\", function () {\r",
									"    pm.response.to.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Methods is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Methods\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Headers is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Headers\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Date is present\", function () {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Content-Length is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Length\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Origin is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Expose-Headers is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Expose-Headers\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that User-Agent is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"User-Agent\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Host is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Host\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Accept-Encoding is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Accept-Encoding\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Postman-Token is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Postman-Token\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Accept is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Accept\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that API key is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"api_key\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Bearer-Token is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Bearer-Token\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://petstore3.swagger.io/api/v4/pet/468",
							"protocol": "https",
							"host": [
								"petstore3",
								"swagger",
								"io"
							],
							"path": [
								"api",
								"v4",
								"pet",
								"468"
							]
						}
					},
					"response": []
				},
				{
					"name": "400 - invalid pet id (special characters)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify that response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that response time not above than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.not.be.above(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that is unsuccessful DELETE request\", function () {\r",
									"    pm.expect(pm.response.code).to.not.be.oneOf([200, 201, 204]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that there is bad request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([415, 400, 404, 405]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that status code is not 500 or 503 (Server Error)\", function () {\r",
									"    pm.response.to.not.have.status([500, 503]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Connection is present\", function () {\r",
									"    pm.response.to.have.header(\"Connection\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Server is present\", function () {\r",
									"    pm.response.to.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Methods is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Methods\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Headers is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Headers\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Date is present\", function () {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Content-Length is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Length\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Origin is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Expose-Headers is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Expose-Headers\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that User-Agent is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"User-Agent\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Host is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Host\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Accept-Encoding is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Accept-Encoding\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Postman-Token is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Postman-Token\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Accept is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Accept\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that API key is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"api_key\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Bearer-Token is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Bearer-Token\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/pet/121212121::1!",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet",
								"121212121::1!"
							]
						}
					},
					"response": []
				},
				{
					"name": "400 - invalid pet id (string)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify that response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that response time not above than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.not.be.above(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that is unsuccessful DELETE request\", function () {\r",
									"    pm.expect(pm.response.code).to.not.be.oneOf([200, 201, 204]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that there is bad request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([415, 400, 404, 405]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that status code is not 500 or 503 (Server Error)\", function () {\r",
									"    pm.response.to.not.have.status([500, 503]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Connection is present\", function () {\r",
									"    pm.response.to.have.header(\"Connection\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Server is present\", function () {\r",
									"    pm.response.to.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Methods is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Methods\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Headers is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Headers\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Date is present\", function () {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Content-Length is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Length\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Allow-Origin is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Access-Control-Expose-Headers is present\", function () {\r",
									"    pm.response.to.have.header(\"Access-Control-Expose-Headers\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that User-Agent is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"User-Agent\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Host is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Host\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Accept-Encoding is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Accept-Encoding\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Postman-Token is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Postman-Token\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Accept is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Accept\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that API key is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"api_key\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that Bearer-Token is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Bearer-Token\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/pet/121212121s",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet",
								"121212121s"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "External files - Data Variables",
			"item": [
				{
					"name": "Create a pet",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var random = Math.floor(Math.random()*10000);\r",
									"pm.environment.set(\"randomId\", random);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": {{randomId}},\r\n  \"name\": \"{{petName}}\",\r\n  \"category\": {\r\n    \"id\": {{categoryId}},\r\n    \"name\": \"{{categoryName}}\"\r\n  },\r\n  \"photoUrls\": [\r\n    \"string\"\r\n  ],\r\n  \"tags\": [\r\n    {\r\n      \"id\": {{tagId}},\r\n      \"name\": \"{{tagName}}\"\r\n    }\r\n  ],\r\n  \"status\": \"{{status}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/pet",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check the pet",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/pet/{{randomId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet",
								"{{randomId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update the pet",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.get(\"randomId\");\r",
									"\r",
									"var randomCategory = Math.floor(Math.random()*100);\r",
									"pm.environment.set(\"randomCategoryId\", randomCategory);\r",
									"\r",
									"var randomTag = Math.floor(Math.random()*100);\r",
									"pm.environment.set(\"randomTagId\", randomTag);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": {{randomId}},\r\n  \"name\": \"{{petName}}\",\r\n  \"category\": {\r\n    \"id\":{{randomCategoryId}},\r\n    \"name\": \"{{categoryName}}\"\r\n  },\r\n  \"photoUrls\": [\r\n    \"string\"\r\n  ],\r\n  \"tags\": [\r\n    {\r\n      \"id\": {{randomTagId}},\r\n      \"name\": \"{{tagName}}\"\r\n    }\r\n  ],\r\n  \"status\": \"{{status}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/pet",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check the pet",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/pet/{{randomId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet",
								"{{randomId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete the pet",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "api_key",
									"type": "string"
								},
								{
									"key": "key",
									"value": "api_key",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/pet/{{randomId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet",
								"{{randomId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check if the pet is deleted",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/pet/{{randomId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet",
								"{{randomId}}"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}